server:
  port: 8081
spring:
  redis:
    host: 192.168.1.107
    password: 123456
    port: 6379
  profiles:
    active: requestRateLimiter_route
#使用自定义过滤器工厂
---
spring:
  cloud:
    gateway:
      #默认的全局过滤器，所有路由都会作用到。
      default-filters:
#      - AddResponseHeader=X-Response-Default-Name, Default-Value
      - AddRequestHeader=hello, hello
#      - AddRequestParameter=name, value
      routes:
      - id: request_time_route
        uri: http://localhost:3333
        filters:
        - RequestTime=false
        predicates:
        - Path= /helloFirst
  profiles: request_time_route


#AddRequestHeader过滤器工厂会在请求头加上一对请求头，名称为X-Request-Foo，值为Bar。
---
spring:
  cloud:
    gateway:
      routes:
      - id: add_request_header_route
        uri: http://httpbin.org:80/get
        filters:
        - AddRequestHeader=X-Request-Foo, Bar
        predicates:
        - After=2017-01-20T17:42:47.789-07:00[America/Denver]
  profiles: add_request_header_route


---
spring:
  cloud:
    gateway:
      routes:
      - id: add_response_header_route
        uri: http://httpbin.org:80/get
        filters:
        - AddResponseHeader=X-Response-Foo, Bar
        predicates:
        - After=2017-01-20T17:42:47.789-07:00[America/Denver]
  profiles: add_response_header_route


#  上面的配置中，所有的/foo/**开始的路径都会命中配置的router，并执行过滤器的逻辑，在本案例中配置了RewritePath过滤器工厂，
#  此工厂将/foo/(?.*)重写为{segment}，然后转发到https://blog.csdn.net。比如在网页上请求localhost:8081/foo/forezp，
#  此时会将请求转发到https://blog.csdn.net/forezp的页面，比如在网页上请求localhost:8081/foo/forezp/1，页面显示404，就是因为不存在https://blog.csdn.net/forezp/1这个页面。
---
spring:
  cloud:
    gateway:
      routes:
      - id: rewritepath_route
        uri: https://blog.csdn.net
        predicates:
        - Path=/foo/**
        filters:
        - RewritePath=/foo/(?<segment>.*), /$\{segment}
  profiles: rewritepath_route

#Hystrix熔断过滤器工厂，fallbackUri设置熔断接口。一个路由中可以有多个过滤器。
---
spring:
  cloud:
    gateway:
      routes:
      - id: hystrix_route
        uri: http://localhost:3333/helloAdd #不存在地址，测试是否熔断
        predicates:
        - Path=/hystrix/**
        filters:
        - AddRequestHeader=hello, Bar
        - RewritePath=/foo/(?<segment>.*), /$\{segment}
        - name: Hystrix
          args:
            name: fallbackcmd
            fallbackUri: forward:/fallback
  profiles: hystrix_route


---
spring:
  cloud:
    gateway:
      routes:
      - id: requestRateLimiter_route
        uri: http://localhost:3333/helloAdd
        predicates:
        - Path=/hystrix/**
        filters:
        - AddRequestHeader=hello, Bar
        - RewritePath=/foo/(?<segment>.*), /$\{segment}
#        - name: Hystrix
#          args:
#            name: fallbackcmd
#            fallbackUri: forward:/fallback
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: 1  #允许用户每秒处理多少个请求
            redis-rate-limiter.burstCapacity: 20  #令牌桶的容量，允许在一秒钟内完成的最大请求数
            key-resolver: "#{@userKeyResolver}"
  profiles: requestRateLimiter_route